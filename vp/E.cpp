#include <bits/stdc++.h>
using namespace std;
using i64 = long long;
constexpr i64 INF = 4e18;

void solve() {
    i64 n, m, t;
    cin >> n >> m >> t;
    string s;
    cin >> s;
    for (auto& x : s) {
        x -= 'a';
    }

    vector a(m, vector<i64> (m));
    for (int i = 0; i < m; ++i) {
        for (int j = 0; j < m; ++j) {
            cin >> a[i][j];
        }
    }

    vector<vector<i64>> dp(1 << n, vector<i64> (n, INF));
    for (int i = 0; i < n; ++i) {
        dp[1 << i][i] = a[0][s[i]] + t;
    }
    for (int msk = 1; msk < (1 << n); ++msk) {
        if(__builtin_popcount(msk) == 1) continue;

        for (int i = 0; i < n; ++i) {
            if ((msk >> i & 1) == 0) continue;
            for (int j = 0; j < n; ++j) {
                if (i == j || (msk >> j & 1) == 0) continue;
                int l = i, r = j;
                if (l > r) swap(l, r);
                int nxt = msk ^ (1 << i);
                int pc = (bitset<30> (nxt) >> (l + 1)).count()
                       - (bitset<30> (nxt) >> (r + 1)).count();

                // if (j < i) --pc;
                // assert(pc >= 0);
                dp[msk][i] = min(dp[msk][i], dp[nxt][j] + (pc + 1) * t + a[s[j]][s[i]]);
            }
        }
    }

    cout << *min_element(dp[(1 << n) - 1].begin(), dp[(1 << n) - 1].end()) << endl;
}
/*
20 20 1
abcdefghijklmnopqrst
0 100000 100000 100000 100000 100000 100000 100000 100000 100000 100000 100000 100000 100000 100000 100000 100000 100000 100000 0
1 0 100000 100000 100000 100000 100000 100000 100000 100000 100000 100000 100000 100000 100000 100000 100000 100000 100000 100000
1 1 0 100000 100000 100000 100000 100000 100000 100000 100000 100000 100000 100000 100000 100000 100000 100000 100000 100000
1 1 1 0 100000 100000 100000 100000 100000 100000 100000 100000 100000 100000 100000 100000 100000 100000 100000 100000
1 1 1 1 0 100000 100000 100000 100000 100000 100000 100000 100000 100000 100000 100000 100000 100000 100000 100000
1 1 1 1 1 0 100000 100000 100000 100000 100000 100000 100000 100000 100000 100000 100000 100000 100000 100000
1 1 1 1 1 1 0 100000 100000 100000 100000 100000 100000 100000 100000 100000 100000 100000 100000 100000
1 1 1 1 1 1 1 0 100000 100000 100000 100000 100000 100000 100000 100000 100000 100000 100000 100000
1 1 1 1 1 1 1 1 0 100000 100000 100000 100000 100000 100000 100000 100000 100000 100000 100000
1 1 1 1 1 1 1 1 1 0 100000 100000 100000 100000 100000 100000 100000 100000 100000 100000
1 1 1 1 1 1 1 1 1 1 0 100000 100000 100000 100000 100000 100000 100000 100000 100000
1 1 1 1 1 1 1 1 1 1 1 0 100000 100000 100000 100000 100000 100000 100000 100000
1 1 1 1 1 1 1 1 1 1 1 1 0 100000 100000 100000 100000 100000 100000 100000
1 1 1 1 1 1 1 1 1 1 1 1 1 0 100000 100000 100000 100000 100000 100000
1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 100000 100000 100000 100000 100000
1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 100000 100000 100000 100000
1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 100000 100000 100000
1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 100000 100000
1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 100000
1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0
*/

/*
3 3 1
abc
0 100 0
1 0 100
1 1 0
*/

int main() {
    cin.tie(nullptr)->sync_with_stdio(0);
    solve();
    return 0;
}